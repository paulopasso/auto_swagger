{"filepath": "data/swagger_docs/ex20.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/reports', (req, res) =>{};", "completion": "/**\n * @openapi\n * /reports:\n *   post:\n *     summary: Request a new report\n *     description: |\n *       Starts the generation of a report asynchronously.\n *       The client should poll the job status using the returned job ID.\n *     tags:\n *       - Reports\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/ReportRequest'\n *     responses:\n *       202:\n *         description: Report generation started\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/JobCreated'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex20.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/jobs/:id/status', (req, res) =>{};", "completion": "/**\n   * @openapi\n   * /jobs/{id}/status:\n   *   get:\n   *     summary: Check job status\n   *     description: Poll the status of a long-running job.\n   *     tags:\n   *       - Reports\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: integer\n   *         description: The job ID\n   *     responses:\n   *       200:\n   *         description: Job status info\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/JobStatus'\n   */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex20.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/jobs/:id/result', (req, res) =>{};", "completion": "/**\n   * @openapi\n   * /jobs/{id}/result:\n   *   get:\n   *     summary: Get job result\n   *     description: |\n   *       Returns the result of the job once it's complete.\n   *     tags:\n   *       - Reports\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         required: true\n   *         schema:\n   *           type: integer\n   *         description: The job ID\n   *     responses:\n   *       200:\n   *         description: Job result\n   *         content:\n   *           application/json:\n   *             schema:\n   *               $ref: '#/components/schemas/ReportResult'\n   *       425:\n   *         description: Job not ready yet (Too Early)\n   */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex14.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/posts', (req, res) =>{};", "completion": "/**\n * @openapi\n * /posts:\n *   get:\n *     summary: Get posts filtered by tags\n *     description: Retrieve a list of blog posts filtered by one or more tags.\n *     tags:\n *       - Posts\n *     parameters:\n *       - in: query\n *         name: tags\n *         required: false\n *         schema:\n *           type: array\n *           items:\n *             type: string\n *           style: form\n *           explode: true\n *         description: Tags to filter posts by (e.g. ?tags=tech&tags=ai)\n *     responses:\n *       200:\n *         description: Filtered posts\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Post'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex30.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/weather', (req, res) =>{};", "completion": "/**\n * @openapi\n * /weather:\n *   get:\n *     summary: Get current weather by city\n *     description: |\n *       Returns the current weather data for a specified city. Ideal for use by AI assistants or chatbots.\n *     tags:\n *       - LLM Tools\n *     parameters:\n *       - name: city\n *         in: query\n *         required: true\n *         schema:\n *           type: string\n *         description: Name of the city to get weather for\n *     responses:\n *       200:\n *         description: Current weather in the specified city\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/WeatherResponse'\n *       404:\n *         description: City not found\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex2.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/products', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products:\n *   post:\n *     summary: Create a new product\n *     description: Add a new product to the catalog.\n *     tags:\n *       - Products\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/NewProduct'\n *     responses:\n *       201:\n *         description: Product created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Product'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex10.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/orders', (req, res) =>{};", "completion": "/**\n * @openapi\n * /orders:\n *   post:\n *     summary: Create a new order\n *     description: Submit a new order with a valid status and payment method.\n *     tags:\n *       - Orders\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/NewOrder'\n *     responses:\n *       201:\n *         description: Order successfully created\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Order'\n *       400:\n *         description: Invalid input\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex24.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/me', (req, res) =>{};", "completion": "/**\n * @openapi\n * /me:\n *   get:\n *     summary: Get current user profile\n *     description: |\n *       Returns the authenticated user's profile. The shape of the response depends on the user's role:\n       admin users get extra permissions info, while standard users get a simpler structure.\n *     tags:\n *       - Users\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Current user info\n *         content:\n *           application/json:\n *             schema:\n *               oneOf:\n *                 - $ref: '#/components/schemas/AdminUser'\n *                 - $ref: '#/components/schemas/StandardUser'\n *               discriminator:\n *                 propertyName: role\n *                 mapping:\n *                   admin: '#/components/schemas/AdminUser'\n *                   standard: '#/components/schemas/StandardUser'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex6.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/products/search', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products/search:\n *   get:\n *     summary: Search products\n *     description: Retrieve a list of products filtered by category, in-stock status, or price range.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: query\n *         name: category\n *         schema:\n *           type: string\n *         description: Filter by category (e.g. \"electronics\")\n *       - in: query\n *         name: inStock\n *         schema:\n *           type: boolean\n *         description: Filter by stock availability\n *       - in: query\n *         name: minPrice\n *         schema:\n *           type: number\n *         description: Minimum price\n *       - in: query\n *         name: maxPrice\n *         schema:\n *           type: number\n *         description: Maximum price\n *     responses:\n *       200:\n *         description: Filtered list of products\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Product'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex11.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/orders', (req, res) =>{};", "completion": "/**\n * @openapi\n * /orders:\n *   post:\n *     summary: Create an order with items\n *     description: Submit a new order that includes customer info and multiple product items.\n *     tags:\n *       - Orders\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/OrderRequest'\n *     responses:\n *       201:\n *         description: Order created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/OrderResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex25.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/documents/process', (req, res) =>{};", "completion": "/**\n * @openapi\n * /documents/process:\n *   post:\n *     summary: Submit document for async processing\n *     description: |\n *       Uploads a document to be processed asynchronously. When processing is complete, the system will call back to the client's URL.\n *     tags:\n *       - Documents\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/DocumentProcessRequest'\n *     responses:\n *       202:\n *         description: Processing started\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/JobCreated'\n *     callbacks:\n *       onProcessed:\n *         '{$request.body.callbackUrl}':\n *           post:\n *             summary: Document processed callback\n *             description: |\n *               The system will call this URL once document processing is complete.\n *             requestBody:\n *               required: true\n *               content:\n *                 application/json:\n *                   schema:\n *                     $ref: '#/components/schemas/DocumentProcessedEvent'\n *             responses:\n *               200:\n *                 description: Acknowledged\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex7.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/products/:id/image', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products/{id}/image:\n *   post:\n *     summary: Upload product image\n *     description: Upload an image for a specific product.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The ID of the product to upload the image for\n *     requestBody:\n *       required: true\n *       content:\n *         multipart/form-data:\n *           schema:\n *             type: object\n *             properties:\n *               image:\n *                 type: string\n *                 format: binary\n *     responses:\n *       200:\n *         description: Image uploaded successfully\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: \"Image uploaded\"\n *       400:\n *         description: Bad request (missing file)\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex21.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/org/users', (req, res) =>{};", "completion": "/**\n * @openapi\n * /org/users:\n *   get:\n *     summary: List users in the organization\n *     description: |\n *       Retrieve all users that belong to the organization identified by the `X-Org-ID` header.\n *       This endpoint is part of a multi-tenant architecture and requires proper scoping.\n *     tags:\n *       - Organization\n *     parameters:\n *       - in: header\n *         name: X-Org-ID\n *         required: true\n *         schema:\n *           type: string\n *         description: Unique identifier of the organization\n *     responses:\n *       200:\n *         description: List of users in the organization\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/User'\n *       400:\n *         description: Missing or invalid organization header\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex15.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/products/recommendations', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products/recommendations:\n *   get:\n *     summary: Get product recommendations\n *     description: |\n *       Returns a list of recommended products based on user's browsing history, preferences, and optionally filtered by a price range.\n *       The recommendations are automatically ranked and limited by the provided `limit` parameter.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: query\n *         name: minPrice\n *         required: false\n *         schema:\n *           type: number\n *           minimum: 0\n *           default: 0\n *         description: Minimum price for recommended products\n *       - in: query\n *         name: maxPrice\n *         required: false\n *         schema:\n *           type: number\n *           minimum: 1\n *           default: 500\n *         description: Maximum price for recommended products\n *       - in: query\n *         name: limit\n *         required: false\n *         schema:\n *           type: integer\n *           minimum: 1\n *           maximum: 100\n *           default: 10\n *         description: Maximum number of products to return (1–100)\n *     responses:\n *       200:\n *         description: List of recommended products\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Product'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex31.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/calendar/meetings', (req, res) =>{};", "completion": "/**\n * @openapi\n * /calendar/meetings:\n *   post:\n *     summary: Book a new meeting\n *     description: |\n *       Books a meeting with one or more participants. Ideal for use by AI agents or assistants in productivity workflows.\n *     tags:\n *       - LLM Tools\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/NewMeetingRequest'\n *     responses:\n *       201:\n *         description: Meeting booked successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/MeetingConfirmation'\n *       400:\n *         description: Invalid request data\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex3.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/products/:id', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products/{id}:\n *   get:\n *     summary: Get product by ID\n *     description: Retrieve a single product using its unique ID.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The product ID\n *     responses:\n *       200:\n *         description: A single product\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Product'\n *       404:\n *         description: Product not found\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex8.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/me', (req, res) =>{};", "completion": "/**\n * @openapi\n * /me:\n *   get:\n *     summary: Get current user profile\n *     description: Retrieve the authenticated user's profile information.\n *     tags:\n *       - Users\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: Authenticated user's profile\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       401:\n *         description: Unauthorized - missing or invalid token\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex9.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/products', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products:\n *   get:\n *     summary: Get paginated list of products\n *     description: Retrieve a paginated list of products with metadata like total count and current page.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: query\n *         name: page\n *         schema:\n *           type: integer\n *           default: 1\n *         description: Page number\n *       - in: query\n *         name: limit\n *         schema:\n *           type: integer\n *           default: 10\n *         description: Number of items per page\n *     responses:\n *       200:\n *         description: Paginated list of products\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/PaginatedProducts'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex18.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/admin/users/bulk', (req, res) =>{};", "completion": "/**\n * @openapi\n * /admin/users/bulk:\n *   post:\n *     summary: Bulk create users\n *     description: |\n *       Create multiple users in a single request. Returns a detailed report with status for each user.\n *       This endpoint is ideal for admins importing large datasets.\n *     tags:\n *       - Admin\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             type: array\n *             items:\n *               $ref: '#/components/schemas/NewUser'\n *     responses:\n *       207:\n *         description: Partial success or failure\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/BulkOperationResult'\n *       401:\n *         description: Unauthorized\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex28.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/public/data', (req, res) =>{};", "completion": "/**\n * @openapi\n * /public/data:\n *   get:\n *     summary: Access public data with API key\n *     description: |\n *       Retrieve read-only public data using an API key. This is ideal for CLI tools, read-only SDKs, and third-party integrations.\n *     tags:\n *       - Public\n *     security:\n *       - apiKeyAuth: []\n *     responses:\n *       200:\n *         description: Public data response\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: \"Public data response\"\n *       401:\n *         description: Missing or invalid API key\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex28.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/user/profile', (req, res) =>{};", "completion": "/**\n * @openapi\n * /user/profile:\n *   get:\n *     summary: Get authenticated user profile\n *     description: Requires a Bearer token to return the current user's profile.\n *     tags:\n *       - Users\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       200:\n *         description: User profile\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex28.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/billing/transactions', (req, res) =>{};", "completion": "/**\n * @openapi\n * /billing/transactions:\n *   get:\n *     summary: Get billing transactions\n *     description: Requires OAuth2 with `read:billing` scope.\n *     tags:\n *       - Billing\n *     security:\n *       - oauth2:\n *           - read:billing\n *     responses:\n *       200:\n *         description: Billing history\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Transaction'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex29.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.put('/org/users/:userId', (req, res) =>{};", "completion": "/**\n * @openapi\n * /org/users/{userId}:\n *   put:\n *     summary: Update a team member (admin role only, tenant-scoped)\n *     description: |\n *       Update a user within your organization. You must include a valid `X-Org-ID` header and be authenticated with the `admin` role.\n *     tags:\n *       - Organization\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: header\n *         name: X-Org-ID\n *         required: true\n *         schema:\n *           type: string\n *         description: Organization identifier for tenant scoping\n *       - in: path\n *         name: userId\n *         required: true\n *         schema:\n *           type: integer\n *         description: The user ID within the organization\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateUser'\n *     responses:\n *       200:\n *         description: User updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       400:\n *         description: Missing or invalid organization ID\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       403:\n *         description: Forbidden - role not authorized\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex19.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/webhooks/register', (req, res) =>{};", "completion": "/**\n * @openapi\n * /webhooks/register:\n *   post:\n *     summary: Register a webhook URL\n *     description: |\n *       Register a URL that will receive POST events when specific system actions occur.\n *       You must host an HTTPS endpoint that matches the expected callback format.\n *     tags:\n *       - Webhooks\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/WebhookRegistration'\n *     responses:\n *       201:\n *         description: Webhook registered\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/WebhookAck'\n *     callbacks:\n *       eventCallback:\n *         '{$request.body.url}':\n *           post:\n *             summary: Event callback receiver\n *             description: |\n *               This callback is triggered when a user account is deleted.\n *             requestBody:\n *               required: true\n *               content:\n *                 application/json:\n *                   schema:\n *                     $ref: '#/components/schemas/UserDeletedEvent'\n *             responses:\n *               200:\n *                 description: Acknowledged\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex12.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/auth/login', (req, res) =>{};", "completion": "/**\n * @openapi\n * /auth/login:\n *   post:\n *     summary: Log in with email/password or OAuth\n *     description: Authenticate a user either via credentials or an external OAuth provider.\n *     tags:\n *       - Auth\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             oneOf:\n *               - $ref: '#/components/schemas/LoginWithEmail'\n *               - $ref: '#/components/schemas/LoginWithOAuth'\n *             discriminator:\n *               propertyName: type\n *               mapping:\n *                 credentials: '#/components/schemas/LoginWithEmail'\n *                 oauth: '#/components/schemas/LoginWithOAuth'\n *     responses:\n *       200:\n *         description: Successful login\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/AuthToken'\n *       401:\n *         description: Invalid credentials\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex26.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/analytics/reports', (req, res) =>{};", "completion": "/**\n * @openapi\n * /analytics/reports:\n *   get:\n *     summary: Get paginated analytics reports\n *     description: |\n *       Retrieves analytics reports for a given date range.\n *       Supports pagination and filtering using shared components for consistency across the API.\n *     tags:\n *       - Analytics\n *     parameters:\n *       - $ref: '#/components/parameters/Page'\n *       - $ref: '#/components/parameters/Limit'\n *       - $ref: '#/components/parameters/DateFrom'\n *       - $ref: '#/components/parameters/DateTo'\n *     responses:\n *       200:\n *         description: Paginated report results\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/PaginatedReports'\n *       400:\n *         description: Invalid query params\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex4.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.put('/products/:id', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products/{id}:\n *   put:\n *     summary: Update a product\n *     description: Update the details of an existing product by its ID.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The ID of the product to update\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateProduct'\n *     responses:\n *       204:\n *         description: Product updated successfully\n *       404:\n *         description: Product not found\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex22.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/admin/users', (req, res) =>{};", "completion": "/**\n * @openapi\n * /admin/users:\n *   get:\n *     summary: Get list of users (admin only)\n *     description: |\n *       Retrieve a list of all users. This endpoint is protected by OAuth2 and only accessible to clients with the `read:users` scope.\n *     tags:\n *       - Admin\n *     security:\n *       - oauth2:\n *           - read:users\n *     responses:\n *       200:\n *         description: List of users\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/User'\n *       403:\n *         description: Forbidden - insufficient scope\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex16.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/accounts/me', (req, res) =>{};", "completion": "/**\n * @openapi\n * /accounts/me:\n *   get:\n *     summary: Get current account info\n *     description: |\n *       Retrieves account information for the authenticated user.\n *       Supports versioning via custom headers and correlation via request ID.\n *     tags:\n *       - Accounts\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: header\n *         name: X-Request-ID\n *         schema:\n *           type: string\n *         required: false\n *         description: Optional unique ID for tracking the request\n *       - in: header\n *         name: X-API-Version\n *         schema:\n *           type: string\n *           enum: [v1, v2]\n *           default: v1\n *         required: false\n *         description: Specify the API version to use (default is v1)\n *     responses:\n *       200:\n *         description: Account info retrieved successfully\n *         headers:\n *           X-Request-ID:\n *             description: Echoes the request ID sent by the client\n *             schema:\n *               type: string\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Account'\n *       401:\n *         description: Unauthorized\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex32.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/calendar/availability', (req, res) =>{};", "completion": "/**\n * @openapi\n * /calendar/availability:\n *   post:\n *     summary: Suggest available meeting slots\n *     description: |\n *       Suggests a list of available meeting time slots based on requested duration and preferred time range.\n *       This endpoint is intended for use by LLM agents to let the user choose from structured options.\n *     tags:\n *       - LLM Tools\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/AvailabilityRequest'\n *     responses:\n *       200:\n *         description: Suggested time slots\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/TimeSlotSuggestions'\n *       400:\n *         description: Invalid request\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex23.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.patch('/users/:id', (req, res) =>{};", "completion": "/**\n * @openapi\n * /users/{id}:\n *   patch:\n *     summary: Partially update user profile\n *     description: |\n *       Update one or more fields of the user's profile. Requires the authenticated user to have permission to update the target user.\n *     tags:\n *       - Users\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The ID of the user to update\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UserUpdate'\n *     responses:\n *       200:\n *         description: User updated successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       403:\n *         description: Forbidden - you don’t have permission\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       422:\n *         description: Validation failed\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ValidationError'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex17.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/support/tickets', (req, res) =>{};", "completion": "/**\n * @openapi\n * /support/tickets:\n *   post:\n *     summary: Create a support ticket\n *     description: |\n *       Submit a new support ticket. You can optionally include metadata like browser info or session ID.\n *       If input validation fails or a server error occurs, detailed error information will be returned.\n *     tags:\n *       - Support\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/NewSupportTicket'\n *     responses:\n *       201:\n *         description: Ticket successfully created\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/SupportTicket'\n *       400:\n *         description: Invalid request\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n *       500:\n *         description: Internal server error\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex33.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/messages/draft', (req, res) =>{};", "completion": "/**\n * @openapi\n * /messages/draft:\n *   post:\n *     summary: Generate email reply draft\n *     description: |\n *       Uses input context to generate a draft reply. This draft should be presented to the user before sending.\n *     tags:\n *       - LLM Tools\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/DraftRequest'\n *     responses:\n *       200:\n *         description: Draft generated\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/DraftResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex33.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/messages/send', (req, res) =>{};", "completion": "/**\n   * @openapi\n   * /messages/send:\n   *   post:\n   *     summary: Send an email message\n   *     description: |\n   *       Sends a finalized message. This should be used after confirming or editing a generated draft.\n   *     tags:\n   *       - LLM Tools\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             $ref: '#/components/schemas/SendMessage'\n   *     responses:\n   *       201:\n   *         description: Message sent\n   *         content:\n   *           application/json:\n   *             schema:\n   *               type: object\n   *               properties:\n   *                 status:\n   *                   type: string\n   *                   example: \"sent\"\n   */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex1.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/users', (req, res) =>{};", "completion": "/**\n * @openapi\n * /users:\n *   get:\n *     summary: Retrieve a list of users\n *     description: Returns a list of all users in the system.\n *     tags:\n *       - Users\n *     responses:\n *       200:\n *         description: A list of users\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/User'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex13.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.get('/accounts/:id', (req, res) =>{};", "completion": "/**\n * @openapi\n * /accounts/{id}:\n *   get:\n *     summary: Get account by ID\n *     description: Retrieve account details by account ID.\n *     tags:\n *       - Accounts\n *     parameters:\n *       - in: path\n *         name: id\n *         schema:\n *           type: integer\n *         required: true\n *         description: The account ID\n *     responses:\n *       200:\n *         description: Account found\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Account'\n *       404:\n *         description: Account not found\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex13.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.put('/accounts/:id', (req, res) =>{};", "completion": "/**\n   * @openapi\n   * /accounts/{id}:\n   *   put:\n   *     summary: Update account\n   *     description: Update the name or status of an account.\n   *     tags:\n   *       - Accounts\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         schema:\n   *           type: integer\n   *         required: true\n   *         description: The account ID\n   *     requestBody:\n   *       required: true\n   *       content:\n   *         application/json:\n   *           schema:\n   *             $ref: '#/components/schemas/UpdateAccount'\n   *     responses:\n   *       204:\n   *         description: Account updated\n   */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex13.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.delete('/accounts/:id', (req, res) =>{};", "completion": "/**\n   * @openapi\n   * /accounts/{id}:\n   *   delete:\n   *     summary: Delete account\n   *     description: Delete an account by ID.\n   *     tags:\n   *       - Accounts\n   *     parameters:\n   *       - in: path\n   *         name: id\n   *         schema:\n   *           type: integer\n   *         required: true\n   *         description: The account ID\n   *     responses:\n   *       204:\n   *         description: Account deleted\n   */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex27.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.post('/admin/users', (req, res) =>{};", "completion": "/**\n * @openapi\n * /admin/users:\n *   post:\n *     summary: Create a new user (admin only)\n *     description: |\n *       Creates a new user account. This endpoint is restricted to users with the `admin` role.\n *     tags:\n *       - Admin\n *     security:\n *       - bearerAuth: []\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/NewUser'\n *     responses:\n *       201:\n *         description: User created successfully\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       403:\n *         description: Forbidden - insufficient permissions\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/ErrorResponse'\n */\n<|endofjsdoc|>"}
{"filepath": "data/swagger_docs/ex5.js", "prompt": "Generate JSDoc Swagger comments for this Express route:\napp.delete('/products/:id', (req, res) =>{};", "completion": "/**\n * @openapi\n * /products/{id}:\n *   delete:\n *     summary: Delete a product\n *     description: Remove a product from the catalog using its ID.\n *     tags:\n *       - Products\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: The ID of the product to delete\n *     responses:\n *       204:\n *         description: Product deleted successfully\n *       404:\n *         description: Product not found\n */\n<|endofjsdoc|>"}
